{"cells":[{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1744818549550,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"},"user_tz":-330},"id":"KoqIyYHefo1X"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","from torch.utils.data import TensorDataset, DataLoader"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":299,"status":"ok","timestamp":1744818374998,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"},"user_tz":-330},"id":"xzuSQWy5ghr7","outputId":"70be64f7-27f8-494f-e09b-428bc87c531d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       ID  Gender Ever_Married  Age Graduated     Profession  Work_Experience  \\\n","0  462809    Male           No   22        No     Healthcare              1.0   \n","1  462643  Female          Yes   38       Yes       Engineer              NaN   \n","2  466315  Female          Yes   67       Yes       Engineer              1.0   \n","3  461735    Male          Yes   67       Yes         Lawyer              0.0   \n","4  462669  Female          Yes   40       Yes  Entertainment              NaN   \n","\n","  Spending_Score  Family_Size  Var_1 Segmentation  \n","0            Low          4.0  Cat_4            D  \n","1        Average          3.0  Cat_4            A  \n","2            Low          1.0  Cat_6            B  \n","3           High          2.0  Cat_6            B  \n","4           High          6.0  Cat_6            A  "],"text/html":["\n","  <div id=\"df-80a1ab80-5358-4fcf-bc8f-be1b8a2e97e9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Gender</th>\n","      <th>Ever_Married</th>\n","      <th>Age</th>\n","      <th>Graduated</th>\n","      <th>Profession</th>\n","      <th>Work_Experience</th>\n","      <th>Spending_Score</th>\n","      <th>Family_Size</th>\n","      <th>Var_1</th>\n","      <th>Segmentation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>462809</td>\n","      <td>Male</td>\n","      <td>No</td>\n","      <td>22</td>\n","      <td>No</td>\n","      <td>Healthcare</td>\n","      <td>1.0</td>\n","      <td>Low</td>\n","      <td>4.0</td>\n","      <td>Cat_4</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>462643</td>\n","      <td>Female</td>\n","      <td>Yes</td>\n","      <td>38</td>\n","      <td>Yes</td>\n","      <td>Engineer</td>\n","      <td>NaN</td>\n","      <td>Average</td>\n","      <td>3.0</td>\n","      <td>Cat_4</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>466315</td>\n","      <td>Female</td>\n","      <td>Yes</td>\n","      <td>67</td>\n","      <td>Yes</td>\n","      <td>Engineer</td>\n","      <td>1.0</td>\n","      <td>Low</td>\n","      <td>1.0</td>\n","      <td>Cat_6</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>461735</td>\n","      <td>Male</td>\n","      <td>Yes</td>\n","      <td>67</td>\n","      <td>Yes</td>\n","      <td>Lawyer</td>\n","      <td>0.0</td>\n","      <td>High</td>\n","      <td>2.0</td>\n","      <td>Cat_6</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>462669</td>\n","      <td>Female</td>\n","      <td>Yes</td>\n","      <td>40</td>\n","      <td>Yes</td>\n","      <td>Entertainment</td>\n","      <td>NaN</td>\n","      <td>High</td>\n","      <td>6.0</td>\n","      <td>Cat_6</td>\n","      <td>A</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80a1ab80-5358-4fcf-bc8f-be1b8a2e97e9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-80a1ab80-5358-4fcf-bc8f-be1b8a2e97e9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-80a1ab80-5358-4fcf-bc8f-be1b8a2e97e9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9556537d-0a2f-4a5b-a990-9db54ca208d5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9556537d-0a2f-4a5b-a990-9db54ca208d5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9556537d-0a2f-4a5b-a990-9db54ca208d5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 10695,\n  \"fields\": [\n    {\n      \"column\": \"ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2600,\n        \"min\": 458982,\n        \"max\": 467974,\n        \"num_unique_values\": 8363,\n        \"samples\": [\n          464796,\n          465198,\n          461563\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ever_Married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 18,\n        \"max\": 89,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          30,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Graduated\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profession\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Homemaker\",\n          \"Engineer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3907895488163504,\n        \"min\": 0.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          14.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending_Score\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Average\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family_Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5364271953730044,\n        \"min\": 1.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Var_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Cat_4\",\n          \"Cat_6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Segmentation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"A\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["\n","\n","data = pd.read_csv(\"/content/customers (3).csv\")\n","data.head()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1744818379331,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"},"user_tz":-330},"id":"EsWcN-vdgrOU","outputId":"1cade383-1b2e-4893-9b9d-3071410a8acd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['ID', 'Gender', 'Ever_Married', 'Age', 'Graduated', 'Profession',\n","       'Work_Experience', 'Spending_Score', 'Family_Size', 'Var_1',\n","       'Segmentation'],\n","      dtype='object')"]},"metadata":{},"execution_count":4}],"source":["\n","data.columns"]},{"cell_type":"code","source":["# Drop ID column as it's not useful for classification\n","data = data.drop(columns=[\"ID\"])"],"metadata":{"id":"z5UsSOkpb_GZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fm-p3XXGgyKW"},"outputs":[],"source":["\n","# Handle missing values\n","data.fillna({\"Work_Experience\": 0, \"Family_Size\": data[\"Family_Size\"].median()}, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JclId9iPhOBn"},"outputs":[],"source":["\n","# Encode categorical variables\n","categorical_columns = [\"Gender\", \"Ever_Married\", \"Graduated\", \"Profession\", \"Spending_Score\", \"Var_1\"]\n","for col in categorical_columns:\n","    data[col] = LabelEncoder().fit_transform(data[col])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MNGnhmtKhRW1"},"outputs":[],"source":["\n","\n","# Encode target variable\n","label_encoder = LabelEncoder()\n","data[\"Segmentation\"] = label_encoder.fit_transform(data[\"Segmentation\"])  # A, B, C, D -> 0, 1, 2, 3\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I6-AYdCghVnY"},"outputs":[],"source":["# Split features and target\n","X = data.drop(columns=[\"Segmentation\"])\n","y = data[\"Segmentation\"].values\n","\n","# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H7J9HjI_h0Qj"},"outputs":[],"source":["\n","# Normalize features\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4xBw3U5bh3MH"},"outputs":[],"source":["# Convert to tensors\n","X_train = torch.tensor(X_train, dtype=torch.float32)\n","X_test = torch.tensor(X_test, dtype=torch.float32)\n","y_train = torch.tensor(y_train, dtype=torch.long)\n","y_test = torch.tensor(y_test, dtype=torch.long)"]},{"cell_type":"code","source":["# Create DataLoader\n","train_dataset = TensorDataset(X_train, y_train)\n","test_dataset = TensorDataset(X_test, y_test)\n","train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=16)"],"metadata":{"id":"GQUShz2dclqC"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uQ7iQKeviDAS"},"outputs":[],"source":["\n","# Define Neural Network(Model1)\n","class PeopleClassifier(nn.Module):\n","    def __init__(self, input_size):\n","        super(PeopleClassifier, self).__init__()\n","        self.fc1 = nn.Linear(input_size, 32)\n","        self.fc2 = nn.Linear(32, 16)\n","        self.fc3 = nn.Linear(16, 8)\n","        self.fc4 = nn.Linear(8, 4)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = self.fc4(x)\n","        return x\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wUJud8fDjp-l"},"outputs":[],"source":["\n","# Training Loop\n","def train_model(model, train_loader, criterion, optimizer, epochs):\n","  for epoch in range(epochs):\n","    model.train()\n","    for X_batch,y_batch in train_loader:\n","      optimizer.zero_grad()\n","      outputs = model(X_batch)\n","      loss = criterion(outputs, y_batch)\n","      loss.backward()\n","      optimizer.step()\n","\n","    if (epoch + 1) % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')"]},{"cell_type":"code","source":[],"metadata":{"id":"r7dvSjRRoeHf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_1waxdz-prlE"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UI5yV0AslSHy"},"outputs":[],"source":["model = PeopleClassifier(input_size=X_train.shape[1])\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)"]},{"cell_type":"code","source":["train_model(model,train_loader,criterion,optimizer,epochs=100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K7CFqalEpvGm","outputId":"67ccb92e-f26b-452a-f7a1-98d9e9a14916","executionInfo":{"status":"ok","timestamp":1744818548883,"user_tz":-330,"elapsed":0,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"}}},"execution_count":17,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [10/100], Loss: 1.2970\n","Epoch [20/100], Loss: 1.1074\n","Epoch [30/100], Loss: 1.1093\n","Epoch [40/100], Loss: 0.8873\n","Epoch [50/100], Loss: 1.3732\n","Epoch [60/100], Loss: 1.2489\n","Epoch [70/100], Loss: 1.2045\n","Epoch [80/100], Loss: 0.9242\n","Epoch [90/100], Loss: 1.1914\n","Epoch [100/100], Loss: 1.3002\n"]}]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":391,"status":"ok","timestamp":1744818555416,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"},"user_tz":-330},"id":"WY6ev6ZHmaE9"},"outputs":[],"source":["# Create test_loader\n","from torch.utils.data import TensorDataset, DataLoader\n","\n","test_dataset = TensorDataset(X_test, y_test)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False) # You can adjust batch_size as needed\n","\n","model.eval()\n","predictions, actuals = [], []\n","with torch.no_grad():\n","    for X_batch, y_batch in test_loader:\n","        outputs = model(X_batch)\n","        _, predicted = torch.max(outputs, 1)\n","        predictions.extend(predicted.numpy())\n","        actuals.extend(y_batch.numpy())"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":51,"status":"ok","timestamp":1744818557152,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"},"user_tz":-330},"id":"kyHCKoO4cOK_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0f49d63c-c38b-4ab3-afa7-b662df5b9d4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Name: S LALIT CHANDRAN        \n","Register No: 212223240077     \n","Test Accuracy: 0.47%\n","Confusion Matrix:\n"," [[235  97  78 174]\n"," [151 138 108  93]\n"," [ 89  89 227  67]\n"," [128  24  29 412]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           A       0.39      0.40      0.40       584\n","           B       0.40      0.28      0.33       490\n","           C       0.51      0.48      0.50       472\n","           D       0.55      0.69      0.62       593\n","\n","    accuracy                           0.47      2139\n","   macro avg       0.46      0.46      0.46      2139\n","weighted avg       0.46      0.47      0.46      2139\n","\n"]}],"source":["# Compute metrics\n","accuracy = accuracy_score(actuals, predictions)\n","conf_matrix = confusion_matrix(actuals, predictions)\n","class_report = classification_report(actuals, predictions, target_names=[str(i) for i in label_encoder.classes_])\n","print(\"Name: S LALIT CHANDRAN        \")\n","print(\"Register No: 212223240077     \")\n","print(f'Test Accuracy: {accuracy:.2f}%')\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)\n","\n"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":3194,"status":"ok","timestamp":1744818562439,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"},"user_tz":-330},"id":"PWX9Zp2knBN6","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"893f506e-a6ce-469a-e303-58eb487a8895"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","sns.heatmap(conf_matrix, annot=True, cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_,fmt='g')\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n","\n"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"PLfURHp_pNjg","executionInfo":{"status":"ok","timestamp":1744818564812,"user_tz":-330,"elapsed":35,"user":{"displayName":"Lalit chandran","userId":"17022912822758721430"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"768c34bd-8a3f-4d79-8515-e9327ffb0376"},"outputs":[{"output_type":"stream","name":"stdout","text":["Name:  S LALIT CHANDRAN    \n","Register No: 212223240077   \n","Predicted class for sample input: D\n","Actual class for sample input: D\n"]}],"source":["\n","# Prediction for a sample input\n","sample_input = X_test[12].clone().unsqueeze(0).detach().type(torch.float32)\n","with torch.no_grad():\n","    output = model(sample_input)\n","    # Select the prediction for the sample (first element)\n","    predicted_class_index = torch.argmax(output[0]).item()\n","    predicted_class_label = label_encoder.inverse_transform([predicted_class_index])[0]\n","print(\"Name:  S LALIT CHANDRAN    \")\n","print(\"Register No: 212223240077   \")\n","print(f'Predicted class for sample input: {predicted_class_label}')\n","print(f'Actual class for sample input: {label_encoder.inverse_transform([y_test[12].item()])[0]}')"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}